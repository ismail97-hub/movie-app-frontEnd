// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:LocalMovie.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// LocalMovie TABLE
class TableLocalMovie extends SqfEntityTableBase {
  TableLocalMovie() {
    // declare properties of EntityTable
    tableName = 'localMovie';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('movieId', DbType.integer,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('title', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('image', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('rating', DbType.real,
          defaultValue: 0, isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('quality', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('year', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('language', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('country', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('story', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('source', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('datepublication', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableLocalMovie();
  }
}

// LocalFavorite TABLE
class TableLocalFavorite extends SqfEntityTableBase {
  TableLocalFavorite() {
    // declare properties of EntityTable
    tableName = 'localFavorite';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('movieId', DbType.integer,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('title', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('image', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('rating', DbType.real,
          defaultValue: 0, isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('quality', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('year', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('language', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('country', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('story', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('source', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('datepublication', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableLocalFavorite();
  }
}

// LocalCategory TABLE
class TableLocalCategory extends SqfEntityTableBase {
  TableLocalCategory() {
    // declare properties of EntityTable
    tableName = 'localCategory';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('identity', DbType.integer,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('label', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableLocalCategory();
  }
}

// LocalGenre TABLE
class TableLocalGenre extends SqfEntityTableBase {
  TableLocalGenre() {
    // declare properties of EntityTable
    tableName = 'localGenre';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('identity', DbType.integer,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('label', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableLocalGenre();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class MyMovieDataBase extends SqfEntityModelProvider {
  MyMovieDataBase() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    databaseTables = [
      TableLocalMovie.getInstance,
      TableLocalFavorite.getInstance,
      TableLocalCategory.getInstance,
      TableLocalGenre.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region LocalMovie
class LocalMovie {
  LocalMovie(
      {this.id,
      this.movieId,
      this.title,
      this.image,
      this.rating,
      this.quality,
      this.year,
      this.language,
      this.country,
      this.story,
      this.source,
      this.datepublication}) {
    _setDefaultValues();
  }
  LocalMovie.withFields(
      this.movieId,
      this.title,
      this.image,
      this.rating,
      this.quality,
      this.year,
      this.language,
      this.country,
      this.story,
      this.source,
      this.datepublication) {
    _setDefaultValues();
  }
  LocalMovie.withId(
      this.id,
      this.movieId,
      this.title,
      this.image,
      this.rating,
      this.quality,
      this.year,
      this.language,
      this.country,
      this.story,
      this.source,
      this.datepublication) {
    _setDefaultValues();
  }
  // fromMap v2.0
  LocalMovie.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['movieId'] != null) {
      movieId = int.tryParse(o['movieId'].toString());
    }
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['image'] != null) {
      image = o['image'].toString();
    }
    if (o['rating'] != null) {
      rating = double.tryParse(o['rating'].toString());
    }
    if (o['quality'] != null) {
      quality = o['quality'].toString();
    }
    if (o['year'] != null) {
      year = o['year'].toString();
    }
    if (o['language'] != null) {
      language = o['language'].toString();
    }
    if (o['country'] != null) {
      country = o['country'].toString();
    }
    if (o['story'] != null) {
      story = o['story'].toString();
    }
    if (o['source'] != null) {
      source = o['source'].toString();
    }
    if (o['datepublication'] != null) {
      datepublication = o['datepublication'].toString();
    }
  }
  // FIELDS (LocalMovie)
  int? id;
  int? movieId;
  String? title;
  String? image;
  double? rating;
  String? quality;
  String? year;
  String? language;
  String? country;
  String? story;
  String? source;
  String? datepublication;

  BoolResult? saveResult;
  // end FIELDS (LocalMovie)

  static const bool _softDeleteActivated = false;
  LocalMovieManager? __mnLocalMovie;

  LocalMovieManager get _mnLocalMovie {
    return __mnLocalMovie = __mnLocalMovie ?? LocalMovieManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (movieId != null) {
      map['movieId'] = movieId;
    }

    if (title != null) {
      map['title'] = title;
    }

    if (image != null) {
      map['image'] = image;
    }

    if (rating != null) {
      map['rating'] = rating;
    }

    if (quality != null) {
      map['quality'] = quality;
    }

    if (year != null) {
      map['year'] = year;
    }

    if (language != null) {
      map['language'] = language;
    }

    if (country != null) {
      map['country'] = country;
    }

    if (story != null) {
      map['story'] = story;
    }

    if (source != null) {
      map['source'] = source;
    }

    if (datepublication != null) {
      map['datepublication'] = datepublication;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (movieId != null) {
      map['movieId'] = movieId;
    }

    if (title != null) {
      map['title'] = title;
    }

    if (image != null) {
      map['image'] = image;
    }

    if (rating != null) {
      map['rating'] = rating;
    }

    if (quality != null) {
      map['quality'] = quality;
    }

    if (year != null) {
      map['year'] = year;
    }

    if (language != null) {
      map['language'] = language;
    }

    if (country != null) {
      map['country'] = country;
    }

    if (story != null) {
      map['story'] = story;
    }

    if (source != null) {
      map['source'] = source;
    }

    if (datepublication != null) {
      map['datepublication'] = datepublication;
    }

    return map;
  }

  /// This method returns Json String [LocalMovie]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [LocalMovie]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      movieId,
      title,
      image,
      rating,
      quality,
      year,
      language,
      country,
      story,
      source,
      datepublication
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      movieId,
      title,
      image,
      rating,
      quality,
      year,
      language,
      country,
      story,
      source,
      datepublication
    ];
  }

  static Future<List<LocalMovie>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR LocalMovie.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<LocalMovie>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <LocalMovie>[];
    try {
      objList = list
          .map((localmovie) =>
              LocalMovie.fromMap(localmovie as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR LocalMovie.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<LocalMovie>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<LocalMovie> objList = <LocalMovie>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = LocalMovie.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns LocalMovie by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns LocalMovie if exist, otherwise returns null
  Future<LocalMovie?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    LocalMovie? obj;
    final data = await _mnLocalMovie.getById([id]);
    if (data.length != 0) {
      obj = LocalMovie.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (LocalMovie) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnLocalMovie.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnLocalMovie.update(this);
    }

    return id;
  }

  /// saveAs LocalMovie. Returns a new Primary Key value of LocalMovie

  /// <returns>Returns a new Primary Key value of LocalMovie
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<LocalMovie> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<LocalMovie> localmovies) async {
    // final results = _mnLocalMovie.saveAll('INSERT OR REPLACE INTO localMovie (id,movieId, title, image, rating, quality, year, language, country, story, source, datepublication)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',localmovies);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyMovieDataBase().batchStart();
    for (final obj in localmovies) {
      await obj.save();
    }
    //    return MyMovieDataBase().batchCommit();
    final result = await MyMovieDataBase().batchCommit();
    for (int i = 0; i < localmovies.length; i++) {
      if (localmovies[i].id == null) {
        localmovies[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnLocalMovie.rawInsert(
          'INSERT OR REPLACE INTO localMovie (id,movieId, title, image, rating, quality, year, language, country, story, source, datepublication)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            movieId,
            title,
            image,
            rating,
            quality,
            year,
            language,
            country,
            story,
            source,
            datepublication
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'LocalMovie id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'LocalMovie id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'LocalMovie Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<LocalMovie>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<LocalMovie> localmovies) async {
    final results = await _mnLocalMovie.rawInsertAll(
        'INSERT OR REPLACE INTO localMovie (id,movieId, title, image, rating, quality, year, language, country, story, source, datepublication)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
        localmovies);
    return results;
  }

  /// Deletes LocalMovie

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete LocalMovie invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnLocalMovie
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnLocalMovie.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  LocalMovieFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocalMovieFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  LocalMovieFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocalMovieFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    rating = rating ?? 0;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion localmovie

// region LocalMovieField
class LocalMovieField extends SearchCriteria {
  LocalMovieField(this.localmovieFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  LocalMovieFilterBuilder localmovieFB;

  LocalMovieField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  LocalMovieFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    localmovieFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localmovieFB.parameters, param, SqlSyntax.EQuals,
            localmovieFB._addedBlocks)
        : setCriteria(pValue, localmovieFB.parameters, param,
            SqlSyntax.NotEQuals, localmovieFB._addedBlocks);
    _waitingNot = '';
    localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
        localmovieFB._addedBlocks.retVal;
    return localmovieFB;
  }

  LocalMovieFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    localmovieFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localmovieFB.parameters, param,
            SqlSyntax.EQualsOrNull, localmovieFB._addedBlocks)
        : setCriteria(pValue, localmovieFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, localmovieFB._addedBlocks);
    _waitingNot = '';
    localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
        localmovieFB._addedBlocks.retVal;
    return localmovieFB;
  }

  LocalMovieFilterBuilder isNull() {
    localmovieFB._addedBlocks = setCriteria(
        0,
        localmovieFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        localmovieFB._addedBlocks);
    _waitingNot = '';
    localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
        localmovieFB._addedBlocks.retVal;
    return localmovieFB;
  }

  LocalMovieFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      localmovieFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          localmovieFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localmovieFB._addedBlocks);
      _waitingNot = '';
      localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
          localmovieFB._addedBlocks.retVal;
    }
    return localmovieFB;
  }

  LocalMovieFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      localmovieFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          localmovieFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localmovieFB._addedBlocks);
      _waitingNot = '';
      localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
          localmovieFB._addedBlocks.retVal;
      localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
          localmovieFB._addedBlocks.retVal;
    }
    return localmovieFB;
  }

  LocalMovieFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      localmovieFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          localmovieFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localmovieFB._addedBlocks);
      _waitingNot = '';
      localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
          localmovieFB._addedBlocks.retVal;
    }
    return localmovieFB;
  }

  LocalMovieFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      localmovieFB._addedBlocks = setCriteria(
          pFirst,
          localmovieFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localmovieFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        localmovieFB._addedBlocks = setCriteria(pFirst, localmovieFB.parameters,
            param, SqlSyntax.LessThan, localmovieFB._addedBlocks);
      } else {
        localmovieFB._addedBlocks = setCriteria(pFirst, localmovieFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, localmovieFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        localmovieFB._addedBlocks = setCriteria(pLast, localmovieFB.parameters,
            param, SqlSyntax.GreaterThan, localmovieFB._addedBlocks);
      } else {
        localmovieFB._addedBlocks = setCriteria(pLast, localmovieFB.parameters,
            param, SqlSyntax.LessThanOrEquals, localmovieFB._addedBlocks);
      }
    }
    _waitingNot = '';
    localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
        localmovieFB._addedBlocks.retVal;
    return localmovieFB;
  }

  LocalMovieFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    localmovieFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localmovieFB.parameters, param,
            SqlSyntax.GreaterThan, localmovieFB._addedBlocks)
        : setCriteria(pValue, localmovieFB.parameters, param,
            SqlSyntax.LessThanOrEquals, localmovieFB._addedBlocks);
    _waitingNot = '';
    localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
        localmovieFB._addedBlocks.retVal;
    return localmovieFB;
  }

  LocalMovieFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    localmovieFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localmovieFB.parameters, param,
            SqlSyntax.LessThan, localmovieFB._addedBlocks)
        : setCriteria(pValue, localmovieFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, localmovieFB._addedBlocks);
    _waitingNot = '';
    localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
        localmovieFB._addedBlocks.retVal;
    return localmovieFB;
  }

  LocalMovieFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    localmovieFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localmovieFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, localmovieFB._addedBlocks)
        : setCriteria(pValue, localmovieFB.parameters, param,
            SqlSyntax.LessThan, localmovieFB._addedBlocks);
    _waitingNot = '';
    localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
        localmovieFB._addedBlocks.retVal;
    return localmovieFB;
  }

  LocalMovieFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    localmovieFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localmovieFB.parameters, param,
            SqlSyntax.LessThanOrEquals, localmovieFB._addedBlocks)
        : setCriteria(pValue, localmovieFB.parameters, param,
            SqlSyntax.GreaterThan, localmovieFB._addedBlocks);
    _waitingNot = '';
    localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
        localmovieFB._addedBlocks.retVal;
    return localmovieFB;
  }

  LocalMovieFilterBuilder inValues(dynamic pValue) {
    localmovieFB._addedBlocks = setCriteria(
        pValue,
        localmovieFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        localmovieFB._addedBlocks);
    _waitingNot = '';
    localmovieFB._addedBlocks.needEndBlock![localmovieFB._blockIndex] =
        localmovieFB._addedBlocks.retVal;
    return localmovieFB;
  }
}
// endregion LocalMovieField

// region LocalMovieFilterBuilder
class LocalMovieFilterBuilder extends SearchCriteria {
  LocalMovieFilterBuilder(LocalMovie obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  LocalMovie? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  LocalMovieFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  LocalMovieFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  LocalMovieFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  LocalMovieFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  LocalMovieFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  LocalMovieFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  LocalMovieFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  LocalMovieFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  LocalMovieFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  LocalMovieFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  LocalMovieFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  LocalMovieField setField(
      LocalMovieField? field, String colName, DbType dbtype) {
    return LocalMovieField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  LocalMovieField? _id;
  LocalMovieField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  LocalMovieField? _movieId;
  LocalMovieField get movieId {
    return _movieId = setField(_movieId, 'movieId', DbType.integer);
  }

  LocalMovieField? _title;
  LocalMovieField get title {
    return _title = setField(_title, 'title', DbType.text);
  }

  LocalMovieField? _image;
  LocalMovieField get image {
    return _image = setField(_image, 'image', DbType.text);
  }

  LocalMovieField? _rating;
  LocalMovieField get rating {
    return _rating = setField(_rating, 'rating', DbType.real);
  }

  LocalMovieField? _quality;
  LocalMovieField get quality {
    return _quality = setField(_quality, 'quality', DbType.text);
  }

  LocalMovieField? _year;
  LocalMovieField get year {
    return _year = setField(_year, 'year', DbType.text);
  }

  LocalMovieField? _language;
  LocalMovieField get language {
    return _language = setField(_language, 'language', DbType.text);
  }

  LocalMovieField? _country;
  LocalMovieField get country {
    return _country = setField(_country, 'country', DbType.text);
  }

  LocalMovieField? _story;
  LocalMovieField get story {
    return _story = setField(_story, 'story', DbType.text);
  }

  LocalMovieField? _source;
  LocalMovieField get source {
    return _source = setField(_source, 'source', DbType.text);
  }

  LocalMovieField? _datepublication;
  LocalMovieField get datepublication {
    return _datepublication =
        setField(_datepublication, 'datepublication', DbType.text);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (LocalMovie._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<LocalMovie> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (LocalMovie._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnLocalMovie.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnLocalMovie.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from localMovie ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnLocalMovie.updateBatch(qparams, values);
  }

  /// This method always returns LocalMovie Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<LocalMovie>
  Future<LocalMovie?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnLocalMovie.toList(qparams);
    final data = await objFuture;
    LocalMovie? obj;
    if (data.isNotEmpty) {
      obj = LocalMovie.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [LocalMovie]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? localmovieCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final localmoviesFuture = await _obj!._mnLocalMovie.toList(qparams);
    final int count = localmoviesFuture[0]['CNT'] as int;
    if (localmovieCount != null) {
      localmovieCount(count);
    }
    return count;
  }

  /// This method returns List<LocalMovie> [LocalMovie]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<LocalMovie>
  Future<List<LocalMovie>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<LocalMovie> localmoviesData = await LocalMovie.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return localmoviesData;
  }

  /// This method returns Json String [LocalMovie]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [LocalMovie]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [LocalMovie]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnLocalMovie.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [LocalMovie]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM localMovie WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnLocalMovie.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [LocalMovie]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnLocalMovie.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await LocalMovie.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnLocalMovie.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion LocalMovieFilterBuilder

// region LocalMovieFields
class LocalMovieFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fMovieId;
  static TableField get movieId {
    return _fMovieId =
        _fMovieId ?? SqlSyntax.setField(_fMovieId, 'movieId', DbType.integer);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fImage;
  static TableField get image {
    return _fImage =
        _fImage ?? SqlSyntax.setField(_fImage, 'image', DbType.text);
  }

  static TableField? _fRating;
  static TableField get rating {
    return _fRating =
        _fRating ?? SqlSyntax.setField(_fRating, 'rating', DbType.real);
  }

  static TableField? _fQuality;
  static TableField get quality {
    return _fQuality =
        _fQuality ?? SqlSyntax.setField(_fQuality, 'quality', DbType.text);
  }

  static TableField? _fYear;
  static TableField get year {
    return _fYear = _fYear ?? SqlSyntax.setField(_fYear, 'year', DbType.text);
  }

  static TableField? _fLanguage;
  static TableField get language {
    return _fLanguage =
        _fLanguage ?? SqlSyntax.setField(_fLanguage, 'language', DbType.text);
  }

  static TableField? _fCountry;
  static TableField get country {
    return _fCountry =
        _fCountry ?? SqlSyntax.setField(_fCountry, 'country', DbType.text);
  }

  static TableField? _fStory;
  static TableField get story {
    return _fStory =
        _fStory ?? SqlSyntax.setField(_fStory, 'story', DbType.text);
  }

  static TableField? _fSource;
  static TableField get source {
    return _fSource =
        _fSource ?? SqlSyntax.setField(_fSource, 'source', DbType.text);
  }

  static TableField? _fDatepublication;
  static TableField get datepublication {
    return _fDatepublication = _fDatepublication ??
        SqlSyntax.setField(_fDatepublication, 'datepublication', DbType.text);
  }
}
// endregion LocalMovieFields

//region LocalMovieManager
class LocalMovieManager extends SqfEntityProvider {
  LocalMovieManager()
      : super(MyMovieDataBase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'localMovie';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion LocalMovieManager
// region LocalFavorite
class LocalFavorite {
  LocalFavorite(
      {this.id,
      this.movieId,
      this.title,
      this.image,
      this.rating,
      this.quality,
      this.year,
      this.language,
      this.country,
      this.story,
      this.source,
      this.datepublication}) {
    _setDefaultValues();
  }
  LocalFavorite.withFields(
      this.movieId,
      this.title,
      this.image,
      this.rating,
      this.quality,
      this.year,
      this.language,
      this.country,
      this.story,
      this.source,
      this.datepublication) {
    _setDefaultValues();
  }
  LocalFavorite.withId(
      this.id,
      this.movieId,
      this.title,
      this.image,
      this.rating,
      this.quality,
      this.year,
      this.language,
      this.country,
      this.story,
      this.source,
      this.datepublication) {
    _setDefaultValues();
  }
  // fromMap v2.0
  LocalFavorite.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['movieId'] != null) {
      movieId = int.tryParse(o['movieId'].toString());
    }
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['image'] != null) {
      image = o['image'].toString();
    }
    if (o['rating'] != null) {
      rating = double.tryParse(o['rating'].toString());
    }
    if (o['quality'] != null) {
      quality = o['quality'].toString();
    }
    if (o['year'] != null) {
      year = o['year'].toString();
    }
    if (o['language'] != null) {
      language = o['language'].toString();
    }
    if (o['country'] != null) {
      country = o['country'].toString();
    }
    if (o['story'] != null) {
      story = o['story'].toString();
    }
    if (o['source'] != null) {
      source = o['source'].toString();
    }
    if (o['datepublication'] != null) {
      datepublication = o['datepublication'].toString();
    }
  }
  // FIELDS (LocalFavorite)
  int? id;
  int? movieId;
  String? title;
  String? image;
  double? rating;
  String? quality;
  String? year;
  String? language;
  String? country;
  String? story;
  String? source;
  String? datepublication;

  BoolResult? saveResult;
  // end FIELDS (LocalFavorite)

  static const bool _softDeleteActivated = false;
  LocalFavoriteManager? __mnLocalFavorite;

  LocalFavoriteManager get _mnLocalFavorite {
    return __mnLocalFavorite = __mnLocalFavorite ?? LocalFavoriteManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (movieId != null) {
      map['movieId'] = movieId;
    }

    if (title != null) {
      map['title'] = title;
    }

    if (image != null) {
      map['image'] = image;
    }

    if (rating != null) {
      map['rating'] = rating;
    }

    if (quality != null) {
      map['quality'] = quality;
    }

    if (year != null) {
      map['year'] = year;
    }

    if (language != null) {
      map['language'] = language;
    }

    if (country != null) {
      map['country'] = country;
    }

    if (story != null) {
      map['story'] = story;
    }

    if (source != null) {
      map['source'] = source;
    }

    if (datepublication != null) {
      map['datepublication'] = datepublication;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (movieId != null) {
      map['movieId'] = movieId;
    }

    if (title != null) {
      map['title'] = title;
    }

    if (image != null) {
      map['image'] = image;
    }

    if (rating != null) {
      map['rating'] = rating;
    }

    if (quality != null) {
      map['quality'] = quality;
    }

    if (year != null) {
      map['year'] = year;
    }

    if (language != null) {
      map['language'] = language;
    }

    if (country != null) {
      map['country'] = country;
    }

    if (story != null) {
      map['story'] = story;
    }

    if (source != null) {
      map['source'] = source;
    }

    if (datepublication != null) {
      map['datepublication'] = datepublication;
    }

    return map;
  }

  /// This method returns Json String [LocalFavorite]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [LocalFavorite]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      movieId,
      title,
      image,
      rating,
      quality,
      year,
      language,
      country,
      story,
      source,
      datepublication
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      movieId,
      title,
      image,
      rating,
      quality,
      year,
      language,
      country,
      story,
      source,
      datepublication
    ];
  }

  static Future<List<LocalFavorite>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR LocalFavorite.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<LocalFavorite>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <LocalFavorite>[];
    try {
      objList = list
          .map((localfavorite) =>
              LocalFavorite.fromMap(localfavorite as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR LocalFavorite.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<LocalFavorite>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<LocalFavorite> objList = <LocalFavorite>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = LocalFavorite.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns LocalFavorite by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns LocalFavorite if exist, otherwise returns null
  Future<LocalFavorite?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    LocalFavorite? obj;
    final data = await _mnLocalFavorite.getById([id]);
    if (data.length != 0) {
      obj = LocalFavorite.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (LocalFavorite) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnLocalFavorite.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnLocalFavorite.update(this);
    }

    return id;
  }

  /// saveAs LocalFavorite. Returns a new Primary Key value of LocalFavorite

  /// <returns>Returns a new Primary Key value of LocalFavorite
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<LocalFavorite> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<LocalFavorite> localfavorites) async {
    // final results = _mnLocalFavorite.saveAll('INSERT OR REPLACE INTO localFavorite (id,movieId, title, image, rating, quality, year, language, country, story, source, datepublication)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',localfavorites);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyMovieDataBase().batchStart();
    for (final obj in localfavorites) {
      await obj.save();
    }
    //    return MyMovieDataBase().batchCommit();
    final result = await MyMovieDataBase().batchCommit();
    for (int i = 0; i < localfavorites.length; i++) {
      if (localfavorites[i].id == null) {
        localfavorites[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnLocalFavorite.rawInsert(
          'INSERT OR REPLACE INTO localFavorite (id,movieId, title, image, rating, quality, year, language, country, story, source, datepublication)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            movieId,
            title,
            image,
            rating,
            quality,
            year,
            language,
            country,
            story,
            source,
            datepublication
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'LocalFavorite id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'LocalFavorite id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'LocalFavorite Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<LocalFavorite>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<LocalFavorite> localfavorites) async {
    final results = await _mnLocalFavorite.rawInsertAll(
        'INSERT OR REPLACE INTO localFavorite (id,movieId, title, image, rating, quality, year, language, country, story, source, datepublication)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
        localfavorites);
    return results;
  }

  /// Deletes LocalFavorite

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete LocalFavorite invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnLocalFavorite
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnLocalFavorite.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  LocalFavoriteFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocalFavoriteFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  LocalFavoriteFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocalFavoriteFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    rating = rating ?? 0;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion localfavorite

// region LocalFavoriteField
class LocalFavoriteField extends SearchCriteria {
  LocalFavoriteField(this.localfavoriteFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  LocalFavoriteFilterBuilder localfavoriteFB;

  LocalFavoriteField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  LocalFavoriteFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    localfavoriteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localfavoriteFB.parameters, param,
            SqlSyntax.EQuals, localfavoriteFB._addedBlocks)
        : setCriteria(pValue, localfavoriteFB.parameters, param,
            SqlSyntax.NotEQuals, localfavoriteFB._addedBlocks);
    _waitingNot = '';
    localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
        localfavoriteFB._addedBlocks.retVal;
    return localfavoriteFB;
  }

  LocalFavoriteFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    localfavoriteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localfavoriteFB.parameters, param,
            SqlSyntax.EQualsOrNull, localfavoriteFB._addedBlocks)
        : setCriteria(pValue, localfavoriteFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, localfavoriteFB._addedBlocks);
    _waitingNot = '';
    localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
        localfavoriteFB._addedBlocks.retVal;
    return localfavoriteFB;
  }

  LocalFavoriteFilterBuilder isNull() {
    localfavoriteFB._addedBlocks = setCriteria(
        0,
        localfavoriteFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        localfavoriteFB._addedBlocks);
    _waitingNot = '';
    localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
        localfavoriteFB._addedBlocks.retVal;
    return localfavoriteFB;
  }

  LocalFavoriteFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      localfavoriteFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          localfavoriteFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localfavoriteFB._addedBlocks);
      _waitingNot = '';
      localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
          localfavoriteFB._addedBlocks.retVal;
    }
    return localfavoriteFB;
  }

  LocalFavoriteFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      localfavoriteFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          localfavoriteFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localfavoriteFB._addedBlocks);
      _waitingNot = '';
      localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
          localfavoriteFB._addedBlocks.retVal;
      localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
          localfavoriteFB._addedBlocks.retVal;
    }
    return localfavoriteFB;
  }

  LocalFavoriteFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      localfavoriteFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          localfavoriteFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localfavoriteFB._addedBlocks);
      _waitingNot = '';
      localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
          localfavoriteFB._addedBlocks.retVal;
    }
    return localfavoriteFB;
  }

  LocalFavoriteFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      localfavoriteFB._addedBlocks = setCriteria(
          pFirst,
          localfavoriteFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localfavoriteFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        localfavoriteFB._addedBlocks = setCriteria(
            pFirst,
            localfavoriteFB.parameters,
            param,
            SqlSyntax.LessThan,
            localfavoriteFB._addedBlocks);
      } else {
        localfavoriteFB._addedBlocks = setCriteria(
            pFirst,
            localfavoriteFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            localfavoriteFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        localfavoriteFB._addedBlocks = setCriteria(
            pLast,
            localfavoriteFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            localfavoriteFB._addedBlocks);
      } else {
        localfavoriteFB._addedBlocks = setCriteria(
            pLast,
            localfavoriteFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            localfavoriteFB._addedBlocks);
      }
    }
    _waitingNot = '';
    localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
        localfavoriteFB._addedBlocks.retVal;
    return localfavoriteFB;
  }

  LocalFavoriteFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    localfavoriteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localfavoriteFB.parameters, param,
            SqlSyntax.GreaterThan, localfavoriteFB._addedBlocks)
        : setCriteria(pValue, localfavoriteFB.parameters, param,
            SqlSyntax.LessThanOrEquals, localfavoriteFB._addedBlocks);
    _waitingNot = '';
    localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
        localfavoriteFB._addedBlocks.retVal;
    return localfavoriteFB;
  }

  LocalFavoriteFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    localfavoriteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localfavoriteFB.parameters, param,
            SqlSyntax.LessThan, localfavoriteFB._addedBlocks)
        : setCriteria(pValue, localfavoriteFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, localfavoriteFB._addedBlocks);
    _waitingNot = '';
    localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
        localfavoriteFB._addedBlocks.retVal;
    return localfavoriteFB;
  }

  LocalFavoriteFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    localfavoriteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localfavoriteFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, localfavoriteFB._addedBlocks)
        : setCriteria(pValue, localfavoriteFB.parameters, param,
            SqlSyntax.LessThan, localfavoriteFB._addedBlocks);
    _waitingNot = '';
    localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
        localfavoriteFB._addedBlocks.retVal;
    return localfavoriteFB;
  }

  LocalFavoriteFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    localfavoriteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localfavoriteFB.parameters, param,
            SqlSyntax.LessThanOrEquals, localfavoriteFB._addedBlocks)
        : setCriteria(pValue, localfavoriteFB.parameters, param,
            SqlSyntax.GreaterThan, localfavoriteFB._addedBlocks);
    _waitingNot = '';
    localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
        localfavoriteFB._addedBlocks.retVal;
    return localfavoriteFB;
  }

  LocalFavoriteFilterBuilder inValues(dynamic pValue) {
    localfavoriteFB._addedBlocks = setCriteria(
        pValue,
        localfavoriteFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        localfavoriteFB._addedBlocks);
    _waitingNot = '';
    localfavoriteFB._addedBlocks.needEndBlock![localfavoriteFB._blockIndex] =
        localfavoriteFB._addedBlocks.retVal;
    return localfavoriteFB;
  }
}
// endregion LocalFavoriteField

// region LocalFavoriteFilterBuilder
class LocalFavoriteFilterBuilder extends SearchCriteria {
  LocalFavoriteFilterBuilder(LocalFavorite obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  LocalFavorite? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  LocalFavoriteFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  LocalFavoriteFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  LocalFavoriteFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  LocalFavoriteFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  LocalFavoriteFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  LocalFavoriteFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  LocalFavoriteFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  LocalFavoriteFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  LocalFavoriteFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  LocalFavoriteFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  LocalFavoriteFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  LocalFavoriteField setField(
      LocalFavoriteField? field, String colName, DbType dbtype) {
    return LocalFavoriteField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  LocalFavoriteField? _id;
  LocalFavoriteField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  LocalFavoriteField? _movieId;
  LocalFavoriteField get movieId {
    return _movieId = setField(_movieId, 'movieId', DbType.integer);
  }

  LocalFavoriteField? _title;
  LocalFavoriteField get title {
    return _title = setField(_title, 'title', DbType.text);
  }

  LocalFavoriteField? _image;
  LocalFavoriteField get image {
    return _image = setField(_image, 'image', DbType.text);
  }

  LocalFavoriteField? _rating;
  LocalFavoriteField get rating {
    return _rating = setField(_rating, 'rating', DbType.real);
  }

  LocalFavoriteField? _quality;
  LocalFavoriteField get quality {
    return _quality = setField(_quality, 'quality', DbType.text);
  }

  LocalFavoriteField? _year;
  LocalFavoriteField get year {
    return _year = setField(_year, 'year', DbType.text);
  }

  LocalFavoriteField? _language;
  LocalFavoriteField get language {
    return _language = setField(_language, 'language', DbType.text);
  }

  LocalFavoriteField? _country;
  LocalFavoriteField get country {
    return _country = setField(_country, 'country', DbType.text);
  }

  LocalFavoriteField? _story;
  LocalFavoriteField get story {
    return _story = setField(_story, 'story', DbType.text);
  }

  LocalFavoriteField? _source;
  LocalFavoriteField get source {
    return _source = setField(_source, 'source', DbType.text);
  }

  LocalFavoriteField? _datepublication;
  LocalFavoriteField get datepublication {
    return _datepublication =
        setField(_datepublication, 'datepublication', DbType.text);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (LocalFavorite._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<LocalFavorite> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (LocalFavorite._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnLocalFavorite.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnLocalFavorite.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from localFavorite ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnLocalFavorite.updateBatch(qparams, values);
  }

  /// This method always returns LocalFavorite Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<LocalFavorite>
  Future<LocalFavorite?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnLocalFavorite.toList(qparams);
    final data = await objFuture;
    LocalFavorite? obj;
    if (data.isNotEmpty) {
      obj = LocalFavorite.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [LocalFavorite]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c)? localfavoriteCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final localfavoritesFuture = await _obj!._mnLocalFavorite.toList(qparams);
    final int count = localfavoritesFuture[0]['CNT'] as int;
    if (localfavoriteCount != null) {
      localfavoriteCount(count);
    }
    return count;
  }

  /// This method returns List<LocalFavorite> [LocalFavorite]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<LocalFavorite>
  Future<List<LocalFavorite>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<LocalFavorite> localfavoritesData =
        await LocalFavorite.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return localfavoritesData;
  }

  /// This method returns Json String [LocalFavorite]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [LocalFavorite]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [LocalFavorite]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnLocalFavorite.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [LocalFavorite]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM localFavorite WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnLocalFavorite.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [LocalFavorite]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnLocalFavorite.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await LocalFavorite.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnLocalFavorite.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion LocalFavoriteFilterBuilder

// region LocalFavoriteFields
class LocalFavoriteFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fMovieId;
  static TableField get movieId {
    return _fMovieId =
        _fMovieId ?? SqlSyntax.setField(_fMovieId, 'movieId', DbType.integer);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fImage;
  static TableField get image {
    return _fImage =
        _fImage ?? SqlSyntax.setField(_fImage, 'image', DbType.text);
  }

  static TableField? _fRating;
  static TableField get rating {
    return _fRating =
        _fRating ?? SqlSyntax.setField(_fRating, 'rating', DbType.real);
  }

  static TableField? _fQuality;
  static TableField get quality {
    return _fQuality =
        _fQuality ?? SqlSyntax.setField(_fQuality, 'quality', DbType.text);
  }

  static TableField? _fYear;
  static TableField get year {
    return _fYear = _fYear ?? SqlSyntax.setField(_fYear, 'year', DbType.text);
  }

  static TableField? _fLanguage;
  static TableField get language {
    return _fLanguage =
        _fLanguage ?? SqlSyntax.setField(_fLanguage, 'language', DbType.text);
  }

  static TableField? _fCountry;
  static TableField get country {
    return _fCountry =
        _fCountry ?? SqlSyntax.setField(_fCountry, 'country', DbType.text);
  }

  static TableField? _fStory;
  static TableField get story {
    return _fStory =
        _fStory ?? SqlSyntax.setField(_fStory, 'story', DbType.text);
  }

  static TableField? _fSource;
  static TableField get source {
    return _fSource =
        _fSource ?? SqlSyntax.setField(_fSource, 'source', DbType.text);
  }

  static TableField? _fDatepublication;
  static TableField get datepublication {
    return _fDatepublication = _fDatepublication ??
        SqlSyntax.setField(_fDatepublication, 'datepublication', DbType.text);
  }
}
// endregion LocalFavoriteFields

//region LocalFavoriteManager
class LocalFavoriteManager extends SqfEntityProvider {
  LocalFavoriteManager()
      : super(MyMovieDataBase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'localFavorite';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion LocalFavoriteManager
// region LocalCategory
class LocalCategory {
  LocalCategory({this.id, this.identity, this.label}) {
    _setDefaultValues();
  }
  LocalCategory.withFields(this.identity, this.label) {
    _setDefaultValues();
  }
  LocalCategory.withId(this.id, this.identity, this.label) {
    _setDefaultValues();
  }
  // fromMap v2.0
  LocalCategory.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['identity'] != null) {
      identity = int.tryParse(o['identity'].toString());
    }
    if (o['label'] != null) {
      label = o['label'].toString();
    }
  }
  // FIELDS (LocalCategory)
  int? id;
  int? identity;
  String? label;

  BoolResult? saveResult;
  // end FIELDS (LocalCategory)

  static const bool _softDeleteActivated = false;
  LocalCategoryManager? __mnLocalCategory;

  LocalCategoryManager get _mnLocalCategory {
    return __mnLocalCategory = __mnLocalCategory ?? LocalCategoryManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (identity != null) {
      map['identity'] = identity;
    }

    if (label != null) {
      map['label'] = label;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (identity != null) {
      map['identity'] = identity;
    }

    if (label != null) {
      map['label'] = label;
    }

    return map;
  }

  /// This method returns Json String [LocalCategory]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [LocalCategory]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [identity, label];
  }

  List<dynamic> toArgsWithIds() {
    return [id, identity, label];
  }

  static Future<List<LocalCategory>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR LocalCategory.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<LocalCategory>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <LocalCategory>[];
    try {
      objList = list
          .map((localcategory) =>
              LocalCategory.fromMap(localcategory as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR LocalCategory.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<LocalCategory>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<LocalCategory> objList = <LocalCategory>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = LocalCategory.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns LocalCategory by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns LocalCategory if exist, otherwise returns null
  Future<LocalCategory?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    LocalCategory? obj;
    final data = await _mnLocalCategory.getById([id]);
    if (data.length != 0) {
      obj = LocalCategory.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (LocalCategory) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnLocalCategory.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnLocalCategory.update(this);
    }

    return id;
  }

  /// saveAs LocalCategory. Returns a new Primary Key value of LocalCategory

  /// <returns>Returns a new Primary Key value of LocalCategory
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<LocalCategory> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<LocalCategory> localcategories) async {
    // final results = _mnLocalCategory.saveAll('INSERT OR REPLACE INTO localCategory (id,identity, label)  VALUES (?,?,?)',localcategories);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyMovieDataBase().batchStart();
    for (final obj in localcategories) {
      await obj.save();
    }
    //    return MyMovieDataBase().batchCommit();
    final result = await MyMovieDataBase().batchCommit();
    for (int i = 0; i < localcategories.length; i++) {
      if (localcategories[i].id == null) {
        localcategories[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnLocalCategory.rawInsert(
          'INSERT OR REPLACE INTO localCategory (id,identity, label)  VALUES (?,?,?)',
          [id, identity, label]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'LocalCategory id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'LocalCategory id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'LocalCategory Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<LocalCategory>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<LocalCategory> localcategories) async {
    final results = await _mnLocalCategory.rawInsertAll(
        'INSERT OR REPLACE INTO localCategory (id,identity, label)  VALUES (?,?,?)',
        localcategories);
    return results;
  }

  /// Deletes LocalCategory

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete LocalCategory invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnLocalCategory
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnLocalCategory.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  LocalCategoryFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocalCategoryFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  LocalCategoryFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocalCategoryFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion localcategory

// region LocalCategoryField
class LocalCategoryField extends SearchCriteria {
  LocalCategoryField(this.localcategoryFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  LocalCategoryFilterBuilder localcategoryFB;

  LocalCategoryField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  LocalCategoryFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    localcategoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localcategoryFB.parameters, param,
            SqlSyntax.EQuals, localcategoryFB._addedBlocks)
        : setCriteria(pValue, localcategoryFB.parameters, param,
            SqlSyntax.NotEQuals, localcategoryFB._addedBlocks);
    _waitingNot = '';
    localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
        localcategoryFB._addedBlocks.retVal;
    return localcategoryFB;
  }

  LocalCategoryFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    localcategoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localcategoryFB.parameters, param,
            SqlSyntax.EQualsOrNull, localcategoryFB._addedBlocks)
        : setCriteria(pValue, localcategoryFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, localcategoryFB._addedBlocks);
    _waitingNot = '';
    localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
        localcategoryFB._addedBlocks.retVal;
    return localcategoryFB;
  }

  LocalCategoryFilterBuilder isNull() {
    localcategoryFB._addedBlocks = setCriteria(
        0,
        localcategoryFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        localcategoryFB._addedBlocks);
    _waitingNot = '';
    localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
        localcategoryFB._addedBlocks.retVal;
    return localcategoryFB;
  }

  LocalCategoryFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      localcategoryFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          localcategoryFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localcategoryFB._addedBlocks);
      _waitingNot = '';
      localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
          localcategoryFB._addedBlocks.retVal;
    }
    return localcategoryFB;
  }

  LocalCategoryFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      localcategoryFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          localcategoryFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localcategoryFB._addedBlocks);
      _waitingNot = '';
      localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
          localcategoryFB._addedBlocks.retVal;
      localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
          localcategoryFB._addedBlocks.retVal;
    }
    return localcategoryFB;
  }

  LocalCategoryFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      localcategoryFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          localcategoryFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localcategoryFB._addedBlocks);
      _waitingNot = '';
      localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
          localcategoryFB._addedBlocks.retVal;
    }
    return localcategoryFB;
  }

  LocalCategoryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      localcategoryFB._addedBlocks = setCriteria(
          pFirst,
          localcategoryFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localcategoryFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        localcategoryFB._addedBlocks = setCriteria(
            pFirst,
            localcategoryFB.parameters,
            param,
            SqlSyntax.LessThan,
            localcategoryFB._addedBlocks);
      } else {
        localcategoryFB._addedBlocks = setCriteria(
            pFirst,
            localcategoryFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            localcategoryFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        localcategoryFB._addedBlocks = setCriteria(
            pLast,
            localcategoryFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            localcategoryFB._addedBlocks);
      } else {
        localcategoryFB._addedBlocks = setCriteria(
            pLast,
            localcategoryFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            localcategoryFB._addedBlocks);
      }
    }
    _waitingNot = '';
    localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
        localcategoryFB._addedBlocks.retVal;
    return localcategoryFB;
  }

  LocalCategoryFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    localcategoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localcategoryFB.parameters, param,
            SqlSyntax.GreaterThan, localcategoryFB._addedBlocks)
        : setCriteria(pValue, localcategoryFB.parameters, param,
            SqlSyntax.LessThanOrEquals, localcategoryFB._addedBlocks);
    _waitingNot = '';
    localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
        localcategoryFB._addedBlocks.retVal;
    return localcategoryFB;
  }

  LocalCategoryFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    localcategoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localcategoryFB.parameters, param,
            SqlSyntax.LessThan, localcategoryFB._addedBlocks)
        : setCriteria(pValue, localcategoryFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, localcategoryFB._addedBlocks);
    _waitingNot = '';
    localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
        localcategoryFB._addedBlocks.retVal;
    return localcategoryFB;
  }

  LocalCategoryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    localcategoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localcategoryFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, localcategoryFB._addedBlocks)
        : setCriteria(pValue, localcategoryFB.parameters, param,
            SqlSyntax.LessThan, localcategoryFB._addedBlocks);
    _waitingNot = '';
    localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
        localcategoryFB._addedBlocks.retVal;
    return localcategoryFB;
  }

  LocalCategoryFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    localcategoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localcategoryFB.parameters, param,
            SqlSyntax.LessThanOrEquals, localcategoryFB._addedBlocks)
        : setCriteria(pValue, localcategoryFB.parameters, param,
            SqlSyntax.GreaterThan, localcategoryFB._addedBlocks);
    _waitingNot = '';
    localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
        localcategoryFB._addedBlocks.retVal;
    return localcategoryFB;
  }

  LocalCategoryFilterBuilder inValues(dynamic pValue) {
    localcategoryFB._addedBlocks = setCriteria(
        pValue,
        localcategoryFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        localcategoryFB._addedBlocks);
    _waitingNot = '';
    localcategoryFB._addedBlocks.needEndBlock![localcategoryFB._blockIndex] =
        localcategoryFB._addedBlocks.retVal;
    return localcategoryFB;
  }
}
// endregion LocalCategoryField

// region LocalCategoryFilterBuilder
class LocalCategoryFilterBuilder extends SearchCriteria {
  LocalCategoryFilterBuilder(LocalCategory obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  LocalCategory? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  LocalCategoryFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  LocalCategoryFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  LocalCategoryFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  LocalCategoryFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  LocalCategoryFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  LocalCategoryFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  LocalCategoryFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  LocalCategoryFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  LocalCategoryFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  LocalCategoryFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  LocalCategoryFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  LocalCategoryField setField(
      LocalCategoryField? field, String colName, DbType dbtype) {
    return LocalCategoryField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  LocalCategoryField? _id;
  LocalCategoryField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  LocalCategoryField? _identity;
  LocalCategoryField get identity {
    return _identity = setField(_identity, 'identity', DbType.integer);
  }

  LocalCategoryField? _label;
  LocalCategoryField get label {
    return _label = setField(_label, 'label', DbType.text);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (LocalCategory._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<LocalCategory> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (LocalCategory._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnLocalCategory.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnLocalCategory.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from localCategory ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnLocalCategory.updateBatch(qparams, values);
  }

  /// This method always returns LocalCategory Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<LocalCategory>
  Future<LocalCategory?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnLocalCategory.toList(qparams);
    final data = await objFuture;
    LocalCategory? obj;
    if (data.isNotEmpty) {
      obj = LocalCategory.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [LocalCategory]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c)? localcategoryCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final localcategoriesFuture = await _obj!._mnLocalCategory.toList(qparams);
    final int count = localcategoriesFuture[0]['CNT'] as int;
    if (localcategoryCount != null) {
      localcategoryCount(count);
    }
    return count;
  }

  /// This method returns List<LocalCategory> [LocalCategory]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<LocalCategory>
  Future<List<LocalCategory>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<LocalCategory> localcategoriesData =
        await LocalCategory.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return localcategoriesData;
  }

  /// This method returns Json String [LocalCategory]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [LocalCategory]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [LocalCategory]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnLocalCategory.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [LocalCategory]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM localCategory WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnLocalCategory.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [LocalCategory]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnLocalCategory.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await LocalCategory.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnLocalCategory.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion LocalCategoryFilterBuilder

// region LocalCategoryFields
class LocalCategoryFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fIdentity;
  static TableField get identity {
    return _fIdentity = _fIdentity ??
        SqlSyntax.setField(_fIdentity, 'identity', DbType.integer);
  }

  static TableField? _fLabel;
  static TableField get label {
    return _fLabel =
        _fLabel ?? SqlSyntax.setField(_fLabel, 'label', DbType.text);
  }
}
// endregion LocalCategoryFields

//region LocalCategoryManager
class LocalCategoryManager extends SqfEntityProvider {
  LocalCategoryManager()
      : super(MyMovieDataBase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'localCategory';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion LocalCategoryManager
// region LocalGenre
class LocalGenre {
  LocalGenre({this.id, this.identity, this.label}) {
    _setDefaultValues();
  }
  LocalGenre.withFields(this.identity, this.label) {
    _setDefaultValues();
  }
  LocalGenre.withId(this.id, this.identity, this.label) {
    _setDefaultValues();
  }
  // fromMap v2.0
  LocalGenre.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['identity'] != null) {
      identity = int.tryParse(o['identity'].toString());
    }
    if (o['label'] != null) {
      label = o['label'].toString();
    }
  }
  // FIELDS (LocalGenre)
  int? id;
  int? identity;
  String? label;

  BoolResult? saveResult;
  // end FIELDS (LocalGenre)

  static const bool _softDeleteActivated = false;
  LocalGenreManager? __mnLocalGenre;

  LocalGenreManager get _mnLocalGenre {
    return __mnLocalGenre = __mnLocalGenre ?? LocalGenreManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (identity != null) {
      map['identity'] = identity;
    }

    if (label != null) {
      map['label'] = label;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (identity != null) {
      map['identity'] = identity;
    }

    if (label != null) {
      map['label'] = label;
    }

    return map;
  }

  /// This method returns Json String [LocalGenre]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [LocalGenre]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [identity, label];
  }

  List<dynamic> toArgsWithIds() {
    return [id, identity, label];
  }

  static Future<List<LocalGenre>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR LocalGenre.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<LocalGenre>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <LocalGenre>[];
    try {
      objList = list
          .map((localgenre) =>
              LocalGenre.fromMap(localgenre as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR LocalGenre.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<LocalGenre>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<LocalGenre> objList = <LocalGenre>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = LocalGenre.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns LocalGenre by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns LocalGenre if exist, otherwise returns null
  Future<LocalGenre?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    LocalGenre? obj;
    final data = await _mnLocalGenre.getById([id]);
    if (data.length != 0) {
      obj = LocalGenre.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (LocalGenre) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnLocalGenre.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnLocalGenre.update(this);
    }

    return id;
  }

  /// saveAs LocalGenre. Returns a new Primary Key value of LocalGenre

  /// <returns>Returns a new Primary Key value of LocalGenre
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<LocalGenre> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<LocalGenre> localgenres) async {
    // final results = _mnLocalGenre.saveAll('INSERT OR REPLACE INTO localGenre (id,identity, label)  VALUES (?,?,?)',localgenres);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyMovieDataBase().batchStart();
    for (final obj in localgenres) {
      await obj.save();
    }
    //    return MyMovieDataBase().batchCommit();
    final result = await MyMovieDataBase().batchCommit();
    for (int i = 0; i < localgenres.length; i++) {
      if (localgenres[i].id == null) {
        localgenres[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnLocalGenre.rawInsert(
          'INSERT OR REPLACE INTO localGenre (id,identity, label)  VALUES (?,?,?)',
          [id, identity, label]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'LocalGenre id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'LocalGenre id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'LocalGenre Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<LocalGenre>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<LocalGenre> localgenres) async {
    final results = await _mnLocalGenre.rawInsertAll(
        'INSERT OR REPLACE INTO localGenre (id,identity, label)  VALUES (?,?,?)',
        localgenres);
    return results;
  }

  /// Deletes LocalGenre

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete LocalGenre invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnLocalGenre
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnLocalGenre.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  LocalGenreFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocalGenreFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  LocalGenreFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocalGenreFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion localgenre

// region LocalGenreField
class LocalGenreField extends SearchCriteria {
  LocalGenreField(this.localgenreFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  LocalGenreFilterBuilder localgenreFB;

  LocalGenreField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  LocalGenreFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    localgenreFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localgenreFB.parameters, param, SqlSyntax.EQuals,
            localgenreFB._addedBlocks)
        : setCriteria(pValue, localgenreFB.parameters, param,
            SqlSyntax.NotEQuals, localgenreFB._addedBlocks);
    _waitingNot = '';
    localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
        localgenreFB._addedBlocks.retVal;
    return localgenreFB;
  }

  LocalGenreFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    localgenreFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localgenreFB.parameters, param,
            SqlSyntax.EQualsOrNull, localgenreFB._addedBlocks)
        : setCriteria(pValue, localgenreFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, localgenreFB._addedBlocks);
    _waitingNot = '';
    localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
        localgenreFB._addedBlocks.retVal;
    return localgenreFB;
  }

  LocalGenreFilterBuilder isNull() {
    localgenreFB._addedBlocks = setCriteria(
        0,
        localgenreFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        localgenreFB._addedBlocks);
    _waitingNot = '';
    localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
        localgenreFB._addedBlocks.retVal;
    return localgenreFB;
  }

  LocalGenreFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      localgenreFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          localgenreFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localgenreFB._addedBlocks);
      _waitingNot = '';
      localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
          localgenreFB._addedBlocks.retVal;
    }
    return localgenreFB;
  }

  LocalGenreFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      localgenreFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          localgenreFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localgenreFB._addedBlocks);
      _waitingNot = '';
      localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
          localgenreFB._addedBlocks.retVal;
      localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
          localgenreFB._addedBlocks.retVal;
    }
    return localgenreFB;
  }

  LocalGenreFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      localgenreFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          localgenreFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localgenreFB._addedBlocks);
      _waitingNot = '';
      localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
          localgenreFB._addedBlocks.retVal;
    }
    return localgenreFB;
  }

  LocalGenreFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      localgenreFB._addedBlocks = setCriteria(
          pFirst,
          localgenreFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          localgenreFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        localgenreFB._addedBlocks = setCriteria(pFirst, localgenreFB.parameters,
            param, SqlSyntax.LessThan, localgenreFB._addedBlocks);
      } else {
        localgenreFB._addedBlocks = setCriteria(pFirst, localgenreFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, localgenreFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        localgenreFB._addedBlocks = setCriteria(pLast, localgenreFB.parameters,
            param, SqlSyntax.GreaterThan, localgenreFB._addedBlocks);
      } else {
        localgenreFB._addedBlocks = setCriteria(pLast, localgenreFB.parameters,
            param, SqlSyntax.LessThanOrEquals, localgenreFB._addedBlocks);
      }
    }
    _waitingNot = '';
    localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
        localgenreFB._addedBlocks.retVal;
    return localgenreFB;
  }

  LocalGenreFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    localgenreFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localgenreFB.parameters, param,
            SqlSyntax.GreaterThan, localgenreFB._addedBlocks)
        : setCriteria(pValue, localgenreFB.parameters, param,
            SqlSyntax.LessThanOrEquals, localgenreFB._addedBlocks);
    _waitingNot = '';
    localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
        localgenreFB._addedBlocks.retVal;
    return localgenreFB;
  }

  LocalGenreFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    localgenreFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localgenreFB.parameters, param,
            SqlSyntax.LessThan, localgenreFB._addedBlocks)
        : setCriteria(pValue, localgenreFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, localgenreFB._addedBlocks);
    _waitingNot = '';
    localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
        localgenreFB._addedBlocks.retVal;
    return localgenreFB;
  }

  LocalGenreFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    localgenreFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localgenreFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, localgenreFB._addedBlocks)
        : setCriteria(pValue, localgenreFB.parameters, param,
            SqlSyntax.LessThan, localgenreFB._addedBlocks);
    _waitingNot = '';
    localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
        localgenreFB._addedBlocks.retVal;
    return localgenreFB;
  }

  LocalGenreFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    localgenreFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, localgenreFB.parameters, param,
            SqlSyntax.LessThanOrEquals, localgenreFB._addedBlocks)
        : setCriteria(pValue, localgenreFB.parameters, param,
            SqlSyntax.GreaterThan, localgenreFB._addedBlocks);
    _waitingNot = '';
    localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
        localgenreFB._addedBlocks.retVal;
    return localgenreFB;
  }

  LocalGenreFilterBuilder inValues(dynamic pValue) {
    localgenreFB._addedBlocks = setCriteria(
        pValue,
        localgenreFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        localgenreFB._addedBlocks);
    _waitingNot = '';
    localgenreFB._addedBlocks.needEndBlock![localgenreFB._blockIndex] =
        localgenreFB._addedBlocks.retVal;
    return localgenreFB;
  }
}
// endregion LocalGenreField

// region LocalGenreFilterBuilder
class LocalGenreFilterBuilder extends SearchCriteria {
  LocalGenreFilterBuilder(LocalGenre obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  LocalGenre? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  LocalGenreFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  LocalGenreFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  LocalGenreFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  LocalGenreFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  LocalGenreFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  LocalGenreFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  LocalGenreFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  LocalGenreFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  LocalGenreFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  LocalGenreFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  LocalGenreFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  LocalGenreField setField(
      LocalGenreField? field, String colName, DbType dbtype) {
    return LocalGenreField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  LocalGenreField? _id;
  LocalGenreField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  LocalGenreField? _identity;
  LocalGenreField get identity {
    return _identity = setField(_identity, 'identity', DbType.integer);
  }

  LocalGenreField? _label;
  LocalGenreField get label {
    return _label = setField(_label, 'label', DbType.text);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (LocalGenre._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<LocalGenre> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (LocalGenre._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnLocalGenre.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnLocalGenre.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from localGenre ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnLocalGenre.updateBatch(qparams, values);
  }

  /// This method always returns LocalGenre Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<LocalGenre>
  Future<LocalGenre?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnLocalGenre.toList(qparams);
    final data = await objFuture;
    LocalGenre? obj;
    if (data.isNotEmpty) {
      obj = LocalGenre.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [LocalGenre]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? localgenreCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final localgenresFuture = await _obj!._mnLocalGenre.toList(qparams);
    final int count = localgenresFuture[0]['CNT'] as int;
    if (localgenreCount != null) {
      localgenreCount(count);
    }
    return count;
  }

  /// This method returns List<LocalGenre> [LocalGenre]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<LocalGenre>
  Future<List<LocalGenre>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<LocalGenre> localgenresData = await LocalGenre.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return localgenresData;
  }

  /// This method returns Json String [LocalGenre]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [LocalGenre]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [LocalGenre]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnLocalGenre.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [LocalGenre]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM localGenre WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnLocalGenre.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [LocalGenre]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnLocalGenre.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await LocalGenre.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnLocalGenre.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion LocalGenreFilterBuilder

// region LocalGenreFields
class LocalGenreFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fIdentity;
  static TableField get identity {
    return _fIdentity = _fIdentity ??
        SqlSyntax.setField(_fIdentity, 'identity', DbType.integer);
  }

  static TableField? _fLabel;
  static TableField get label {
    return _fLabel =
        _fLabel ?? SqlSyntax.setField(_fLabel, 'label', DbType.text);
  }
}
// endregion LocalGenreFields

//region LocalGenreManager
class LocalGenreManager extends SqfEntityProvider {
  LocalGenreManager()
      : super(MyMovieDataBase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'localGenre';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion LocalGenreManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await MyMovieDataBaseSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await MyMovieDataBaseSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await MyMovieDataBaseSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class MyMovieDataBaseSequenceManager extends SqfEntityProvider {
  MyMovieDataBaseSequenceManager() : super(MyMovieDataBase());
}
// END OF ENTITIES
