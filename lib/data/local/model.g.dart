// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:History.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// History TABLE
class TableHistory extends SqfEntityTableBase {
  TableHistory() {
    // declare properties of EntityTable
    tableName = 'History';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('image', DbType.text),
      SqfEntityFieldBase('rating', DbType.real, defaultValue: 0),
      SqfEntityFieldBase('quality', DbType.text),
      SqfEntityFieldBase('year', DbType.text),
      SqfEntityFieldBase('language', DbType.text),
      SqfEntityFieldBase('country', DbType.text),
      SqfEntityFieldBase('story', DbType.text),
      SqfEntityFieldBase('source', DbType.text),
      SqfEntityFieldBase('datepublication', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableHistory();
  }
}

// Favorite TABLE
class TableFavorite extends SqfEntityTableBase {
  TableFavorite() {
    // declare properties of EntityTable
    tableName = 'Favorite';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('image', DbType.text),
      SqfEntityFieldBase('rating', DbType.real, defaultValue: 0),
      SqfEntityFieldBase('quality', DbType.text),
      SqfEntityFieldBase('year', DbType.text),
      SqfEntityFieldBase('language', DbType.text),
      SqfEntityFieldBase('country', DbType.text),
      SqfEntityFieldBase('story', DbType.text),
      SqfEntityFieldBase('source', DbType.text),
      SqfEntityFieldBase('datepublication', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableFavorite();
  }
}

// LocalCategory TABLE
class TableLocalCategory extends SqfEntityTableBase {
  TableLocalCategory() {
    // declare properties of EntityTable
    tableName = 'localCategory';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('label', DbType.text),
      SqfEntityFieldBase('labelEn', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableLocalCategory();
  }
}

// LocalGenre TABLE
class TableLocalGenre extends SqfEntityTableBase {
  TableLocalGenre() {
    // declare properties of EntityTable
    tableName = 'localGenre';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('label', DbType.text),
      SqfEntityFieldBase('labelEn', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableLocalGenre();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class MyMovieDataBase extends SqfEntityModelProvider {
  MyMovieDataBase() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableHistory.getInstance,
      TableFavorite.getInstance,
      TableLocalCategory.getInstance,
      TableLocalGenre.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region History
class History extends TableBase {
  History(
      {this.id,
      this.title,
      this.image,
      this.rating,
      this.quality,
      this.year,
      this.language,
      this.country,
      this.story,
      this.source,
      this.datepublication}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  History.withFields(
      this.id,
      this.title,
      this.image,
      this.rating,
      this.quality,
      this.year,
      this.language,
      this.country,
      this.story,
      this.source,
      this.datepublication) {
    _setDefaultValues();
  }
  History.withId(
      this.id,
      this.title,
      this.image,
      this.rating,
      this.quality,
      this.year,
      this.language,
      this.country,
      this.story,
      this.source,
      this.datepublication) {
    _setDefaultValues();
  }
  // fromMap v2.0
  History.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['image'] != null) {
      image = o['image'].toString();
    }
    if (o['rating'] != null) {
      rating = double.tryParse(o['rating'].toString());
    }
    if (o['quality'] != null) {
      quality = o['quality'].toString();
    }
    if (o['year'] != null) {
      year = o['year'].toString();
    }
    if (o['language'] != null) {
      language = o['language'].toString();
    }
    if (o['country'] != null) {
      country = o['country'].toString();
    }
    if (o['story'] != null) {
      story = o['story'].toString();
    }
    if (o['source'] != null) {
      source = o['source'].toString();
    }
    if (o['datepublication'] != null) {
      datepublication = o['datepublication'].toString();
    }

    isSaved = true;
  }
  // FIELDS (History)
  int? id;
  String? title;
  String? image;
  double? rating;
  String? quality;
  String? year;
  String? language;
  String? country;
  String? story;
  String? source;
  String? datepublication;
  bool? isSaved;
  // end FIELDS (History)

  static const bool _softDeleteActivated = false;
  HistoryManager? __mnHistory;

  HistoryManager get _mnHistory {
    return __mnHistory = __mnHistory ?? HistoryManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (image != null || !forView) {
      map['image'] = image;
    }
    if (rating != null || !forView) {
      map['rating'] = rating;
    }
    if (quality != null || !forView) {
      map['quality'] = quality;
    }
    if (year != null || !forView) {
      map['year'] = year;
    }
    if (language != null || !forView) {
      map['language'] = language;
    }
    if (country != null || !forView) {
      map['country'] = country;
    }
    if (story != null || !forView) {
      map['story'] = story;
    }
    if (source != null || !forView) {
      map['source'] = source;
    }
    if (datepublication != null || !forView) {
      map['datepublication'] = datepublication;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (image != null || !forView) {
      map['image'] = image;
    }
    if (rating != null || !forView) {
      map['rating'] = rating;
    }
    if (quality != null || !forView) {
      map['quality'] = quality;
    }
    if (year != null || !forView) {
      map['year'] = year;
    }
    if (language != null || !forView) {
      map['language'] = language;
    }
    if (country != null || !forView) {
      map['country'] = country;
    }
    if (story != null || !forView) {
      map['story'] = story;
    }
    if (source != null || !forView) {
      map['source'] = source;
    }
    if (datepublication != null || !forView) {
      map['datepublication'] = datepublication;
    }

    return map;
  }

  /// This method returns Json String [History]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [History]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      id,
      title,
      image,
      rating,
      quality,
      year,
      language,
      country,
      story,
      source,
      datepublication
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      title,
      image,
      rating,
      quality,
      year,
      language,
      country,
      story,
      source,
      datepublication
    ];
  }

  static Future<List<History>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR History.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<History>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <History>[];
    try {
      objList = list
          .map((history) => History.fromMap(history as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR History.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<History>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<History> objList = <History>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = History.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns History by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [History] if exist, otherwise returns null
  Future<History?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    History? obj;
    final data = await _mnHistory.getById([id]);
    if (data.length != 0) {
      obj = History.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (History) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnHistory.insert(this, ignoreBatch);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      await _mnHistory.update(this);
    }

    return id;
  }

  /// Saves the (History) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnHistory.insertOrThrow(this, ignoreBatch);
      if (saveResult != null && saveResult!.success) {
        isSaved = true;
      }
      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnHistory.updateOrThrow(this);
    }

    return id;
  }

  void rollbackId() {
    if (isInsert == true) {
      id = null;
    }
  }

  /// saveAll method saves the sent List<History> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<History> histories) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyMovieDataBase().batchStart();
    for (final obj in histories) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyMovieDataBase().batchCommit();
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnHistory.rawInsert(
          'INSERT OR REPLACE INTO History (id, title, image, rating, quality, year, language, country, story, source, datepublication)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            title,
            image,
            rating,
            quality,
            year,
            language,
            country,
            story,
            source,
            datepublication
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'History id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'History id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'History Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<History>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<History> histories) async {
    final results = await _mnHistory.rawInsertAll(
        'INSERT OR REPLACE INTO History (id, title, image, rating, quality, year, language, country, story, source, datepublication)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        histories);
    return results;
  }

  /// Deletes History

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete History invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnHistory
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnHistory.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [History] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  HistoryFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return HistoryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  HistoryFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return HistoryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    rating = rating ?? 0;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion history

// region HistoryField
class HistoryField extends FilterBase {
  HistoryField(HistoryFilterBuilder historyFB) : super(historyFB);

  @override
  HistoryFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as HistoryFilterBuilder;
  }

  @override
  HistoryFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as HistoryFilterBuilder;
  }

  @override
  HistoryFilterBuilder isNull() {
    return super.isNull() as HistoryFilterBuilder;
  }

  @override
  HistoryFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as HistoryFilterBuilder;
  }

  @override
  HistoryFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as HistoryFilterBuilder;
  }

  @override
  HistoryFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as HistoryFilterBuilder;
  }

  @override
  HistoryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as HistoryFilterBuilder;
  }

  @override
  HistoryFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as HistoryFilterBuilder;
  }

  @override
  HistoryFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as HistoryFilterBuilder;
  }

  @override
  HistoryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as HistoryFilterBuilder;
  }

  @override
  HistoryFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as HistoryFilterBuilder;
  }

  @override
  HistoryFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as HistoryFilterBuilder;
  }

  @override
  HistoryField get not {
    return super.not as HistoryField;
  }
}
// endregion HistoryField

// region HistoryFilterBuilder
class HistoryFilterBuilder extends ConjunctionBase {
  HistoryFilterBuilder(History obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnHistory = obj._mnHistory;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  HistoryManager? _mnHistory;

  /// put the sql keyword 'AND'
  @override
  HistoryFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  HistoryFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  HistoryFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  HistoryFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  HistoryFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  HistoryFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  HistoryFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  HistoryFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  HistoryFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  HistoryFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  HistoryFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  HistoryField _setField(HistoryField? field, String colName, DbType dbtype) {
    return HistoryField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  HistoryField? _id;
  HistoryField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  HistoryField? _title;
  HistoryField get title {
    return _title = _setField(_title, 'title', DbType.text);
  }

  HistoryField? _image;
  HistoryField get image {
    return _image = _setField(_image, 'image', DbType.text);
  }

  HistoryField? _rating;
  HistoryField get rating {
    return _rating = _setField(_rating, 'rating', DbType.real);
  }

  HistoryField? _quality;
  HistoryField get quality {
    return _quality = _setField(_quality, 'quality', DbType.text);
  }

  HistoryField? _year;
  HistoryField get year {
    return _year = _setField(_year, 'year', DbType.text);
  }

  HistoryField? _language;
  HistoryField get language {
    return _language = _setField(_language, 'language', DbType.text);
  }

  HistoryField? _country;
  HistoryField get country {
    return _country = _setField(_country, 'country', DbType.text);
  }

  HistoryField? _story;
  HistoryField get story {
    return _story = _setField(_story, 'story', DbType.text);
  }

  HistoryField? _source;
  HistoryField get source {
    return _source = _setField(_source, 'source', DbType.text);
  }

  HistoryField? _datepublication;
  HistoryField get datepublication {
    return _datepublication =
        _setField(_datepublication, 'datepublication', DbType.text);
  }

  /// Deletes List<History> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnHistory!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnHistory!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from History ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnHistory!.updateBatch(qparams, values);
  }

  /// This method always returns [History] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> History?
  @override
  Future<History?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnHistory!.toList(qparams);
    final data = await objFuture;
    History? obj;
    if (data.isNotEmpty) {
      obj = History.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [History]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> History?
  @override
  Future<History> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        History();
  }

  /// This method returns int. [History]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? historyCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final historiesFuture = await _mnHistory!.toList(qparams);
    final int count = historiesFuture[0]['CNT'] as int;
    if (historyCount != null) {
      historyCount(count);
    }
    return count;
  }

  /// This method returns List<History> [History]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<History>
  @override
  Future<List<History>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<History> historiesData = await History.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return historiesData;
  }

  /// This method returns Json String [History]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [History]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [History]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnHistory!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [History]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM History WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnHistory!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [History]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnHistory!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await History.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnHistory!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion HistoryFilterBuilder

// region HistoryFields
class HistoryFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fImage;
  static TableField get image {
    return _fImage =
        _fImage ?? SqlSyntax.setField(_fImage, 'image', DbType.text);
  }

  static TableField? _fRating;
  static TableField get rating {
    return _fRating =
        _fRating ?? SqlSyntax.setField(_fRating, 'rating', DbType.real);
  }

  static TableField? _fQuality;
  static TableField get quality {
    return _fQuality =
        _fQuality ?? SqlSyntax.setField(_fQuality, 'quality', DbType.text);
  }

  static TableField? _fYear;
  static TableField get year {
    return _fYear = _fYear ?? SqlSyntax.setField(_fYear, 'year', DbType.text);
  }

  static TableField? _fLanguage;
  static TableField get language {
    return _fLanguage =
        _fLanguage ?? SqlSyntax.setField(_fLanguage, 'language', DbType.text);
  }

  static TableField? _fCountry;
  static TableField get country {
    return _fCountry =
        _fCountry ?? SqlSyntax.setField(_fCountry, 'country', DbType.text);
  }

  static TableField? _fStory;
  static TableField get story {
    return _fStory =
        _fStory ?? SqlSyntax.setField(_fStory, 'story', DbType.text);
  }

  static TableField? _fSource;
  static TableField get source {
    return _fSource =
        _fSource ?? SqlSyntax.setField(_fSource, 'source', DbType.text);
  }

  static TableField? _fDatepublication;
  static TableField get datepublication {
    return _fDatepublication = _fDatepublication ??
        SqlSyntax.setField(_fDatepublication, 'datepublication', DbType.text);
  }
}
// endregion HistoryFields

//region HistoryManager
class HistoryManager extends SqfEntityProvider {
  HistoryManager()
      : super(MyMovieDataBase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'History';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion HistoryManager
// region Favorite
class Favorite extends TableBase {
  Favorite(
      {this.id,
      this.title,
      this.image,
      this.rating,
      this.quality,
      this.year,
      this.language,
      this.country,
      this.story,
      this.source,
      this.datepublication}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Favorite.withFields(
      this.id,
      this.title,
      this.image,
      this.rating,
      this.quality,
      this.year,
      this.language,
      this.country,
      this.story,
      this.source,
      this.datepublication) {
    _setDefaultValues();
  }
  Favorite.withId(
      this.id,
      this.title,
      this.image,
      this.rating,
      this.quality,
      this.year,
      this.language,
      this.country,
      this.story,
      this.source,
      this.datepublication) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Favorite.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['image'] != null) {
      image = o['image'].toString();
    }
    if (o['rating'] != null) {
      rating = double.tryParse(o['rating'].toString());
    }
    if (o['quality'] != null) {
      quality = o['quality'].toString();
    }
    if (o['year'] != null) {
      year = o['year'].toString();
    }
    if (o['language'] != null) {
      language = o['language'].toString();
    }
    if (o['country'] != null) {
      country = o['country'].toString();
    }
    if (o['story'] != null) {
      story = o['story'].toString();
    }
    if (o['source'] != null) {
      source = o['source'].toString();
    }
    if (o['datepublication'] != null) {
      datepublication = o['datepublication'].toString();
    }

    isSaved = true;
  }
  // FIELDS (Favorite)
  int? id;
  String? title;
  String? image;
  double? rating;
  String? quality;
  String? year;
  String? language;
  String? country;
  String? story;
  String? source;
  String? datepublication;
  bool? isSaved;
  // end FIELDS (Favorite)

  static const bool _softDeleteActivated = false;
  FavoriteManager? __mnFavorite;

  FavoriteManager get _mnFavorite {
    return __mnFavorite = __mnFavorite ?? FavoriteManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (image != null || !forView) {
      map['image'] = image;
    }
    if (rating != null || !forView) {
      map['rating'] = rating;
    }
    if (quality != null || !forView) {
      map['quality'] = quality;
    }
    if (year != null || !forView) {
      map['year'] = year;
    }
    if (language != null || !forView) {
      map['language'] = language;
    }
    if (country != null || !forView) {
      map['country'] = country;
    }
    if (story != null || !forView) {
      map['story'] = story;
    }
    if (source != null || !forView) {
      map['source'] = source;
    }
    if (datepublication != null || !forView) {
      map['datepublication'] = datepublication;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (image != null || !forView) {
      map['image'] = image;
    }
    if (rating != null || !forView) {
      map['rating'] = rating;
    }
    if (quality != null || !forView) {
      map['quality'] = quality;
    }
    if (year != null || !forView) {
      map['year'] = year;
    }
    if (language != null || !forView) {
      map['language'] = language;
    }
    if (country != null || !forView) {
      map['country'] = country;
    }
    if (story != null || !forView) {
      map['story'] = story;
    }
    if (source != null || !forView) {
      map['source'] = source;
    }
    if (datepublication != null || !forView) {
      map['datepublication'] = datepublication;
    }

    return map;
  }

  /// This method returns Json String [Favorite]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Favorite]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      id,
      title,
      image,
      rating,
      quality,
      year,
      language,
      country,
      story,
      source,
      datepublication
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      title,
      image,
      rating,
      quality,
      year,
      language,
      country,
      story,
      source,
      datepublication
    ];
  }

  static Future<List<Favorite>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Favorite.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Favorite>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Favorite>[];
    try {
      objList = list
          .map((favorite) => Favorite.fromMap(favorite as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Favorite.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Favorite>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Favorite> objList = <Favorite>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Favorite.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Favorite by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Favorite] if exist, otherwise returns null
  Future<Favorite?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Favorite? obj;
    final data = await _mnFavorite.getById([id]);
    if (data.length != 0) {
      obj = Favorite.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Favorite) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnFavorite.insert(this, ignoreBatch);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      await _mnFavorite.update(this);
    }

    return id;
  }

  /// Saves the (Favorite) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnFavorite.insertOrThrow(this, ignoreBatch);
      if (saveResult != null && saveResult!.success) {
        isSaved = true;
      }
      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnFavorite.updateOrThrow(this);
    }

    return id;
  }

  void rollbackId() {
    if (isInsert == true) {
      id = null;
    }
  }

  /// saveAll method saves the sent List<Favorite> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Favorite> favorites) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyMovieDataBase().batchStart();
    for (final obj in favorites) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyMovieDataBase().batchCommit();
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnFavorite.rawInsert(
          'INSERT OR REPLACE INTO Favorite (id, title, image, rating, quality, year, language, country, story, source, datepublication)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            title,
            image,
            rating,
            quality,
            year,
            language,
            country,
            story,
            source,
            datepublication
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Favorite id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Favorite id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Favorite Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Favorite>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Favorite> favorites) async {
    final results = await _mnFavorite.rawInsertAll(
        'INSERT OR REPLACE INTO Favorite (id, title, image, rating, quality, year, language, country, story, source, datepublication)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        favorites);
    return results;
  }

  /// Deletes Favorite

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Favorite invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnFavorite
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnFavorite.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Favorite] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  FavoriteFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return FavoriteFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  FavoriteFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return FavoriteFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    rating = rating ?? 0;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion favorite

// region FavoriteField
class FavoriteField extends FilterBase {
  FavoriteField(FavoriteFilterBuilder favoriteFB) : super(favoriteFB);

  @override
  FavoriteFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as FavoriteFilterBuilder;
  }

  @override
  FavoriteFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as FavoriteFilterBuilder;
  }

  @override
  FavoriteFilterBuilder isNull() {
    return super.isNull() as FavoriteFilterBuilder;
  }

  @override
  FavoriteFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as FavoriteFilterBuilder;
  }

  @override
  FavoriteFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as FavoriteFilterBuilder;
  }

  @override
  FavoriteFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as FavoriteFilterBuilder;
  }

  @override
  FavoriteFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as FavoriteFilterBuilder;
  }

  @override
  FavoriteFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as FavoriteFilterBuilder;
  }

  @override
  FavoriteFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as FavoriteFilterBuilder;
  }

  @override
  FavoriteFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as FavoriteFilterBuilder;
  }

  @override
  FavoriteFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as FavoriteFilterBuilder;
  }

  @override
  FavoriteFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as FavoriteFilterBuilder;
  }

  @override
  FavoriteField get not {
    return super.not as FavoriteField;
  }
}
// endregion FavoriteField

// region FavoriteFilterBuilder
class FavoriteFilterBuilder extends ConjunctionBase {
  FavoriteFilterBuilder(Favorite obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnFavorite = obj._mnFavorite;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  FavoriteManager? _mnFavorite;

  /// put the sql keyword 'AND'
  @override
  FavoriteFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  FavoriteFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  FavoriteFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  FavoriteFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  FavoriteFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  FavoriteFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  FavoriteFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  FavoriteFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  FavoriteFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  FavoriteFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  FavoriteFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  FavoriteField _setField(FavoriteField? field, String colName, DbType dbtype) {
    return FavoriteField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  FavoriteField? _id;
  FavoriteField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  FavoriteField? _title;
  FavoriteField get title {
    return _title = _setField(_title, 'title', DbType.text);
  }

  FavoriteField? _image;
  FavoriteField get image {
    return _image = _setField(_image, 'image', DbType.text);
  }

  FavoriteField? _rating;
  FavoriteField get rating {
    return _rating = _setField(_rating, 'rating', DbType.real);
  }

  FavoriteField? _quality;
  FavoriteField get quality {
    return _quality = _setField(_quality, 'quality', DbType.text);
  }

  FavoriteField? _year;
  FavoriteField get year {
    return _year = _setField(_year, 'year', DbType.text);
  }

  FavoriteField? _language;
  FavoriteField get language {
    return _language = _setField(_language, 'language', DbType.text);
  }

  FavoriteField? _country;
  FavoriteField get country {
    return _country = _setField(_country, 'country', DbType.text);
  }

  FavoriteField? _story;
  FavoriteField get story {
    return _story = _setField(_story, 'story', DbType.text);
  }

  FavoriteField? _source;
  FavoriteField get source {
    return _source = _setField(_source, 'source', DbType.text);
  }

  FavoriteField? _datepublication;
  FavoriteField get datepublication {
    return _datepublication =
        _setField(_datepublication, 'datepublication', DbType.text);
  }

  /// Deletes List<Favorite> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnFavorite!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnFavorite!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from Favorite ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnFavorite!.updateBatch(qparams, values);
  }

  /// This method always returns [Favorite] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Favorite?
  @override
  Future<Favorite?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnFavorite!.toList(qparams);
    final data = await objFuture;
    Favorite? obj;
    if (data.isNotEmpty) {
      obj = Favorite.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Favorite]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Favorite?
  @override
  Future<Favorite> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Favorite();
  }

  /// This method returns int. [Favorite]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? favoriteCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final favoritesFuture = await _mnFavorite!.toList(qparams);
    final int count = favoritesFuture[0]['CNT'] as int;
    if (favoriteCount != null) {
      favoriteCount(count);
    }
    return count;
  }

  /// This method returns List<Favorite> [Favorite]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Favorite>
  @override
  Future<List<Favorite>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Favorite> favoritesData = await Favorite.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return favoritesData;
  }

  /// This method returns Json String [Favorite]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Favorite]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Favorite]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnFavorite!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Favorite]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM Favorite WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnFavorite!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Favorite]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnFavorite!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Favorite.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnFavorite!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion FavoriteFilterBuilder

// region FavoriteFields
class FavoriteFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fImage;
  static TableField get image {
    return _fImage =
        _fImage ?? SqlSyntax.setField(_fImage, 'image', DbType.text);
  }

  static TableField? _fRating;
  static TableField get rating {
    return _fRating =
        _fRating ?? SqlSyntax.setField(_fRating, 'rating', DbType.real);
  }

  static TableField? _fQuality;
  static TableField get quality {
    return _fQuality =
        _fQuality ?? SqlSyntax.setField(_fQuality, 'quality', DbType.text);
  }

  static TableField? _fYear;
  static TableField get year {
    return _fYear = _fYear ?? SqlSyntax.setField(_fYear, 'year', DbType.text);
  }

  static TableField? _fLanguage;
  static TableField get language {
    return _fLanguage =
        _fLanguage ?? SqlSyntax.setField(_fLanguage, 'language', DbType.text);
  }

  static TableField? _fCountry;
  static TableField get country {
    return _fCountry =
        _fCountry ?? SqlSyntax.setField(_fCountry, 'country', DbType.text);
  }

  static TableField? _fStory;
  static TableField get story {
    return _fStory =
        _fStory ?? SqlSyntax.setField(_fStory, 'story', DbType.text);
  }

  static TableField? _fSource;
  static TableField get source {
    return _fSource =
        _fSource ?? SqlSyntax.setField(_fSource, 'source', DbType.text);
  }

  static TableField? _fDatepublication;
  static TableField get datepublication {
    return _fDatepublication = _fDatepublication ??
        SqlSyntax.setField(_fDatepublication, 'datepublication', DbType.text);
  }
}
// endregion FavoriteFields

//region FavoriteManager
class FavoriteManager extends SqfEntityProvider {
  FavoriteManager()
      : super(MyMovieDataBase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'Favorite';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion FavoriteManager
// region LocalCategory
class LocalCategory extends TableBase {
  LocalCategory({this.id, this.label, this.labelEn}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  LocalCategory.withFields(this.id, this.label, this.labelEn) {
    _setDefaultValues();
  }
  LocalCategory.withId(this.id, this.label, this.labelEn) {
    _setDefaultValues();
  }
  // fromMap v2.0
  LocalCategory.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['label'] != null) {
      label = o['label'].toString();
    }
    if (o['labelEn'] != null) {
      labelEn = o['labelEn'].toString();
    }

    isSaved = true;
  }
  // FIELDS (LocalCategory)
  int? id;
  String? label;
  String? labelEn;
  bool? isSaved;
  // end FIELDS (LocalCategory)

  static const bool _softDeleteActivated = false;
  LocalCategoryManager? __mnLocalCategory;

  LocalCategoryManager get _mnLocalCategory {
    return __mnLocalCategory = __mnLocalCategory ?? LocalCategoryManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (label != null || !forView) {
      map['label'] = label;
    }
    if (labelEn != null || !forView) {
      map['labelEn'] = labelEn;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (label != null || !forView) {
      map['label'] = label;
    }
    if (labelEn != null || !forView) {
      map['labelEn'] = labelEn;
    }

    return map;
  }

  /// This method returns Json String [LocalCategory]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [LocalCategory]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [id, label, labelEn];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, label, labelEn];
  }

  static Future<List<LocalCategory>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR LocalCategory.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<LocalCategory>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <LocalCategory>[];
    try {
      objList = list
          .map((localcategory) =>
              LocalCategory.fromMap(localcategory as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR LocalCategory.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<LocalCategory>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<LocalCategory> objList = <LocalCategory>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = LocalCategory.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns LocalCategory by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [LocalCategory] if exist, otherwise returns null
  Future<LocalCategory?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    LocalCategory? obj;
    final data = await _mnLocalCategory.getById([id]);
    if (data.length != 0) {
      obj = LocalCategory.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (LocalCategory) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnLocalCategory.insert(this, ignoreBatch);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      await _mnLocalCategory.update(this);
    }

    return id;
  }

  /// Saves the (LocalCategory) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnLocalCategory.insertOrThrow(this, ignoreBatch);
      if (saveResult != null && saveResult!.success) {
        isSaved = true;
      }
      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnLocalCategory.updateOrThrow(this);
    }

    return id;
  }

  void rollbackId() {
    if (isInsert == true) {
      id = null;
    }
  }

  /// saveAll method saves the sent List<LocalCategory> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<LocalCategory> localcategories) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyMovieDataBase().batchStart();
    for (final obj in localcategories) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyMovieDataBase().batchCommit();
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnLocalCategory.rawInsert(
          'INSERT OR REPLACE INTO localCategory (id, label, labelEn)  VALUES (?,?,?)',
          [id, label, labelEn],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'LocalCategory id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'LocalCategory id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'LocalCategory Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<LocalCategory>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(
      List<LocalCategory> localcategories) async {
    final results = await _mnLocalCategory.rawInsertAll(
        'INSERT OR REPLACE INTO localCategory (id, label, labelEn)  VALUES (?,?,?)',
        localcategories);
    return results;
  }

  /// Deletes LocalCategory

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete LocalCategory invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnLocalCategory
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnLocalCategory.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [LocalCategory] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  LocalCategoryFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocalCategoryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  LocalCategoryFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocalCategoryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion localcategory

// region LocalCategoryField
class LocalCategoryField extends FilterBase {
  LocalCategoryField(LocalCategoryFilterBuilder localcategoryFB)
      : super(localcategoryFB);

  @override
  LocalCategoryFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as LocalCategoryFilterBuilder;
  }

  @override
  LocalCategoryFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as LocalCategoryFilterBuilder;
  }

  @override
  LocalCategoryFilterBuilder isNull() {
    return super.isNull() as LocalCategoryFilterBuilder;
  }

  @override
  LocalCategoryFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as LocalCategoryFilterBuilder;
  }

  @override
  LocalCategoryFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as LocalCategoryFilterBuilder;
  }

  @override
  LocalCategoryFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as LocalCategoryFilterBuilder;
  }

  @override
  LocalCategoryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as LocalCategoryFilterBuilder;
  }

  @override
  LocalCategoryFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as LocalCategoryFilterBuilder;
  }

  @override
  LocalCategoryFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as LocalCategoryFilterBuilder;
  }

  @override
  LocalCategoryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as LocalCategoryFilterBuilder;
  }

  @override
  LocalCategoryFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as LocalCategoryFilterBuilder;
  }

  @override
  LocalCategoryFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as LocalCategoryFilterBuilder;
  }

  @override
  LocalCategoryField get not {
    return super.not as LocalCategoryField;
  }
}
// endregion LocalCategoryField

// region LocalCategoryFilterBuilder
class LocalCategoryFilterBuilder extends ConjunctionBase {
  LocalCategoryFilterBuilder(LocalCategory obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnLocalCategory = obj._mnLocalCategory;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  LocalCategoryManager? _mnLocalCategory;

  /// put the sql keyword 'AND'
  @override
  LocalCategoryFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  LocalCategoryFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  LocalCategoryFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  LocalCategoryFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  LocalCategoryFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  LocalCategoryFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  LocalCategoryFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  LocalCategoryFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  LocalCategoryFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  LocalCategoryFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  LocalCategoryFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  LocalCategoryField _setField(
      LocalCategoryField? field, String colName, DbType dbtype) {
    return LocalCategoryField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  LocalCategoryField? _id;
  LocalCategoryField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  LocalCategoryField? _label;
  LocalCategoryField get label {
    return _label = _setField(_label, 'label', DbType.text);
  }

  LocalCategoryField? _labelEn;
  LocalCategoryField get labelEn {
    return _labelEn = _setField(_labelEn, 'labelEn', DbType.text);
  }

  /// Deletes List<LocalCategory> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnLocalCategory!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnLocalCategory!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from localCategory ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnLocalCategory!.updateBatch(qparams, values);
  }

  /// This method always returns [LocalCategory] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> LocalCategory?
  @override
  Future<LocalCategory?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnLocalCategory!.toList(qparams);
    final data = await objFuture;
    LocalCategory? obj;
    if (data.isNotEmpty) {
      obj = LocalCategory.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [LocalCategory]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> LocalCategory?
  @override
  Future<LocalCategory> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        LocalCategory();
  }

  /// This method returns int. [LocalCategory]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? localcategoryCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final localcategoriesFuture = await _mnLocalCategory!.toList(qparams);
    final int count = localcategoriesFuture[0]['CNT'] as int;
    if (localcategoryCount != null) {
      localcategoryCount(count);
    }
    return count;
  }

  /// This method returns List<LocalCategory> [LocalCategory]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<LocalCategory>
  @override
  Future<List<LocalCategory>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<LocalCategory> localcategoriesData =
        await LocalCategory.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return localcategoriesData;
  }

  /// This method returns Json String [LocalCategory]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [LocalCategory]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [LocalCategory]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnLocalCategory!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [LocalCategory]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM localCategory WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnLocalCategory!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [LocalCategory]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnLocalCategory!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await LocalCategory.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnLocalCategory!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion LocalCategoryFilterBuilder

// region LocalCategoryFields
class LocalCategoryFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fLabel;
  static TableField get label {
    return _fLabel =
        _fLabel ?? SqlSyntax.setField(_fLabel, 'label', DbType.text);
  }

  static TableField? _fLabelEn;
  static TableField get labelEn {
    return _fLabelEn =
        _fLabelEn ?? SqlSyntax.setField(_fLabelEn, 'labelEn', DbType.text);
  }
}
// endregion LocalCategoryFields

//region LocalCategoryManager
class LocalCategoryManager extends SqfEntityProvider {
  LocalCategoryManager()
      : super(MyMovieDataBase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'localCategory';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion LocalCategoryManager
// region LocalGenre
class LocalGenre extends TableBase {
  LocalGenre({this.id, this.label, this.labelEn}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  LocalGenre.withFields(this.id, this.label, this.labelEn) {
    _setDefaultValues();
  }
  LocalGenre.withId(this.id, this.label, this.labelEn) {
    _setDefaultValues();
  }
  // fromMap v2.0
  LocalGenre.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['label'] != null) {
      label = o['label'].toString();
    }
    if (o['labelEn'] != null) {
      labelEn = o['labelEn'].toString();
    }

    isSaved = true;
  }
  // FIELDS (LocalGenre)
  int? id;
  String? label;
  String? labelEn;
  bool? isSaved;
  // end FIELDS (LocalGenre)

  static const bool _softDeleteActivated = false;
  LocalGenreManager? __mnLocalGenre;

  LocalGenreManager get _mnLocalGenre {
    return __mnLocalGenre = __mnLocalGenre ?? LocalGenreManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (label != null || !forView) {
      map['label'] = label;
    }
    if (labelEn != null || !forView) {
      map['labelEn'] = labelEn;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (label != null || !forView) {
      map['label'] = label;
    }
    if (labelEn != null || !forView) {
      map['labelEn'] = labelEn;
    }

    return map;
  }

  /// This method returns Json String [LocalGenre]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [LocalGenre]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [id, label, labelEn];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, label, labelEn];
  }

  static Future<List<LocalGenre>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR LocalGenre.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<LocalGenre>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <LocalGenre>[];
    try {
      objList = list
          .map((localgenre) =>
              LocalGenre.fromMap(localgenre as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR LocalGenre.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<LocalGenre>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<LocalGenre> objList = <LocalGenre>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = LocalGenre.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns LocalGenre by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [LocalGenre] if exist, otherwise returns null
  Future<LocalGenre?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    LocalGenre? obj;
    final data = await _mnLocalGenre.getById([id]);
    if (data.length != 0) {
      obj = LocalGenre.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (LocalGenre) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnLocalGenre.insert(this, ignoreBatch);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      await _mnLocalGenre.update(this);
    }

    return id;
  }

  /// Saves the (LocalGenre) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnLocalGenre.insertOrThrow(this, ignoreBatch);
      if (saveResult != null && saveResult!.success) {
        isSaved = true;
      }
      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnLocalGenre.updateOrThrow(this);
    }

    return id;
  }

  void rollbackId() {
    if (isInsert == true) {
      id = null;
    }
  }

  /// saveAll method saves the sent List<LocalGenre> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<LocalGenre> localgenres) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyMovieDataBase().batchStart();
    for (final obj in localgenres) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyMovieDataBase().batchCommit();
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnLocalGenre.rawInsert(
          'INSERT OR REPLACE INTO localGenre (id, label, labelEn)  VALUES (?,?,?)',
          [id, label, labelEn],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'LocalGenre id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'LocalGenre id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'LocalGenre Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<LocalGenre>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<LocalGenre> localgenres) async {
    final results = await _mnLocalGenre.rawInsertAll(
        'INSERT OR REPLACE INTO localGenre (id, label, labelEn)  VALUES (?,?,?)',
        localgenres);
    return results;
  }

  /// Deletes LocalGenre

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete LocalGenre invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnLocalGenre
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnLocalGenre.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [LocalGenre] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  LocalGenreFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocalGenreFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  LocalGenreFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return LocalGenreFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion localgenre

// region LocalGenreField
class LocalGenreField extends FilterBase {
  LocalGenreField(LocalGenreFilterBuilder localgenreFB) : super(localgenreFB);

  @override
  LocalGenreFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as LocalGenreFilterBuilder;
  }

  @override
  LocalGenreFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as LocalGenreFilterBuilder;
  }

  @override
  LocalGenreFilterBuilder isNull() {
    return super.isNull() as LocalGenreFilterBuilder;
  }

  @override
  LocalGenreFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as LocalGenreFilterBuilder;
  }

  @override
  LocalGenreFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as LocalGenreFilterBuilder;
  }

  @override
  LocalGenreFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as LocalGenreFilterBuilder;
  }

  @override
  LocalGenreFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as LocalGenreFilterBuilder;
  }

  @override
  LocalGenreFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as LocalGenreFilterBuilder;
  }

  @override
  LocalGenreFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as LocalGenreFilterBuilder;
  }

  @override
  LocalGenreFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as LocalGenreFilterBuilder;
  }

  @override
  LocalGenreFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as LocalGenreFilterBuilder;
  }

  @override
  LocalGenreFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as LocalGenreFilterBuilder;
  }

  @override
  LocalGenreField get not {
    return super.not as LocalGenreField;
  }
}
// endregion LocalGenreField

// region LocalGenreFilterBuilder
class LocalGenreFilterBuilder extends ConjunctionBase {
  LocalGenreFilterBuilder(LocalGenre obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnLocalGenre = obj._mnLocalGenre;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  LocalGenreManager? _mnLocalGenre;

  /// put the sql keyword 'AND'
  @override
  LocalGenreFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  LocalGenreFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  LocalGenreFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  LocalGenreFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  LocalGenreFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  LocalGenreFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  LocalGenreFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  LocalGenreFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  LocalGenreFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  LocalGenreFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  LocalGenreFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  LocalGenreField _setField(
      LocalGenreField? field, String colName, DbType dbtype) {
    return LocalGenreField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  LocalGenreField? _id;
  LocalGenreField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  LocalGenreField? _label;
  LocalGenreField get label {
    return _label = _setField(_label, 'label', DbType.text);
  }

  LocalGenreField? _labelEn;
  LocalGenreField get labelEn {
    return _labelEn = _setField(_labelEn, 'labelEn', DbType.text);
  }

  /// Deletes List<LocalGenre> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnLocalGenre!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnLocalGenre!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from localGenre ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnLocalGenre!.updateBatch(qparams, values);
  }

  /// This method always returns [LocalGenre] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> LocalGenre?
  @override
  Future<LocalGenre?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnLocalGenre!.toList(qparams);
    final data = await objFuture;
    LocalGenre? obj;
    if (data.isNotEmpty) {
      obj = LocalGenre.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [LocalGenre]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> LocalGenre?
  @override
  Future<LocalGenre> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        LocalGenre();
  }

  /// This method returns int. [LocalGenre]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? localgenreCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final localgenresFuture = await _mnLocalGenre!.toList(qparams);
    final int count = localgenresFuture[0]['CNT'] as int;
    if (localgenreCount != null) {
      localgenreCount(count);
    }
    return count;
  }

  /// This method returns List<LocalGenre> [LocalGenre]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<LocalGenre>
  @override
  Future<List<LocalGenre>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<LocalGenre> localgenresData = await LocalGenre.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return localgenresData;
  }

  /// This method returns Json String [LocalGenre]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [LocalGenre]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [LocalGenre]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnLocalGenre!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [LocalGenre]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM localGenre WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnLocalGenre!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [LocalGenre]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnLocalGenre!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await LocalGenre.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnLocalGenre!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion LocalGenreFilterBuilder

// region LocalGenreFields
class LocalGenreFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fLabel;
  static TableField get label {
    return _fLabel =
        _fLabel ?? SqlSyntax.setField(_fLabel, 'label', DbType.text);
  }

  static TableField? _fLabelEn;
  static TableField get labelEn {
    return _fLabelEn =
        _fLabelEn ?? SqlSyntax.setField(_fLabelEn, 'labelEn', DbType.text);
  }
}
// endregion LocalGenreFields

//region LocalGenreManager
class LocalGenreManager extends SqfEntityProvider {
  LocalGenreManager()
      : super(MyMovieDataBase(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'localGenre';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion LocalGenreManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await MyMovieDataBaseSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await MyMovieDataBaseSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await MyMovieDataBaseSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class MyMovieDataBaseSequenceManager extends SqfEntityProvider {
  MyMovieDataBaseSequenceManager() : super(MyMovieDataBase());
}
// END OF ENTITIES
